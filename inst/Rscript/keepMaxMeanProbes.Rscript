#!/bin/tcsh /SOFT/bi/apps/R/bdeRscript

##------------------------------------------------------------##
## Collapse probesets
##------------------------------------------------------------##

suppressMessages(library(ribiosArg))
suppressMessages(library(ribiosUtils))

infile <- getArg("infile", onlyArg=NULL, missingArg=NULL)
getHelp <- existArg("h") | existArg("help")
if(is.null(infile) | getHelp) {
  qqmsg("Usage:",
        scriptName(),
        "-infile FILE [-outfile FILE]\n",
        "-infile: Input gct file, or tab-delimited file with samples as header, and the first column of gene names (GeneID or GeneSymbol)\n",
        "Optional:\n",
	"-chipfile: CHIP file to map probesets to GeneSymbols\n",
        "-outfile: Output file\n",
        sep="")
}

libordie(ribiosIO)
libordie(ribiosExpression)
chipfile <- getArg("chipfile", onlyArg=NULL, missingArg=NULL)
if(!is.null(chipfile)) {
  assertFile(chipfile)
}

outfile <- getArg("outfile", onlyArg=stdout(), missingArg=stdout())
tbl <- read_exprs_matrix(infile)
ids <- rownames(tbl)
rownames(tbl) <- NULL
if(is.null(chipfile)) {
  fd <- new("AnnotatedDataFrame", data.frame(GeneSymbol=ids))
} else {
  chip <- read_chip(chipfile)
  fdd <- matchColumn(ids, chip, "ProbeID") ## fd contains 'GeneSymbol'
  fd <- new("AnnotatedDataFrame", fdd)
}

eset <- new("ExpressionSet",
            exprs=tbl,
            featureData=fd)
eset.uniq <- keepMaxStatProbe(eset, probe.index.name="GeneSymbol", keepNAprobes=FALSE)
featureNames(eset.uniq) <- fData(eset.uniq)$GeneSymbol

outext <- extname(outfile)
if(is.character(outfile) && !is.na(outext) && outext=="gct") {
  write_gct(exprs(eset.uniq), file=outfile, feat.name=fData(eset.uniq)$GeneSymbol)
} else {
  write.table(exprs(eset.uniq), file=outfile, sep="\t", quote=FALSE)
}

qqmsg(status=0L)
