#!/bin/tcsh /SOFT/bi/apps/R/bdeRscript

suppressMessages(library(ribiosUtils))
suppressMessages(library(ribiosArg))

infile <- getArg("infile", onlyArg=NULL, missingArg=NULL)
outfile <- getArg("outfile", onlyArg=NULL, missingArg=NULL)
getHelp <- existArg("h") | existArg("help")

if(is.null(infile) || is.null(outfile) || getHelp)
  qqmsg(paste("\nUsage:",
              scriptName(),
              " -infile FILE -outfile FILE\n",
              "Mandatory parameter:\n",
              "-infile FILE\tInput matrix, first column contains features/genes and first row samples. \n",
              "-outfile FILE\tOutput file. By default PDF file.\n\n",
	      "OPTional parameters may include\n",
              "-ylim a,b\tComma-separated numbers giving the lower and upper limit of the y-axis\n",
              sep=""),
        status=1L)



if(!file.exists(infile))
  qqmsg(sprintf("%s not exist!\n", infile), status=1L)


##---------- read in file ----------##
libordie(ribiosIO)
myRead <- function(x) {
 x <- path.expand(x)
 if (!file.exists(x)) 
   stop(paste(x, "does not exist\n"))
 x.con <- readLines(con = x, n = 3L, warn = FALSE)
 if (grepl("^\\#1\\.2", x.con[1L])) {
   mat <- .Call("read_gct", x, NULL, keep.desc = FALSE)
   return(mat)
 }
 else {
   if (any(grepl("\t", x.con))) {
     df <- read.table(x, sep = "\t", row.names = NULL, 
                      header = TRUE, check.names = FALSE, comment.char = "")
   }
   else {
     df <- read.table(x, sep = "", row.names = NULL, header = TRUE, 
                      check.names = FALSE, comment.char = "")
   }
   return(df)
 }
}
txt <- myRead(infile)
rsnames <- colnames(txt)
## remove \n
rsnames <- gsub("\\\n", "", rsnames)

txt.naCol <- apply(txt, 2L, function(x) all(is.na(x) | x==""))
txt.naRow <- apply(txt, 1L, function(x) all(is.na(x) | x==""))

txt <- txt[!txt.naRow, !txt.naCol, drop=FALSE]
colnames(txt) <- rsnames[!txt.naCol]
txt.class <- sapply(1:ncol(txt), function(x) class(txt[,x]))
txt.num <- txt.class=="numeric"
if(!any(txt.num))
  qqmsg("No numeric columns detected in input file. Existing", status=2L)
if(all(txt.num)) {
  ffac <- rownames(txt)
} else {
  ffac <- apply(txt[, !txt.num, drop=FALSE],
                1L, function(x) paste(x, collapse="_"))
}

mat <- data.matrix(txt[,txt.num])
snames <- colnames(txt)[txt.num]
sfac <- factor(snames, levels=unique(snames))


##---------- plotting ----------##
libordie("lattice")
libordie("ribiosPlot")

openFileDevice(outfile, height=8L, width=12L)
ypretty <- pretty(mat)
if(existArg("ylim")) {
  ylim <- getArg("ylim", onlyArg=NULL, missingArg=NULL)
  ylims <- parseNumVec(ylim,
                       expLen=2L,
                       failVal=c(ypretty[1], ypretty[length(ypretty)]))
} else {
  ylims <- c(ypretty[1], ypretty[length(ypretty)])
}
for(i in seq(along=ffac)) {
  gene <- ffac[i]
  aa <- boxplot(mat[i,] ~ sfac,
                main=gene, xlab="Condition", ylab="Expression",
                ylim=ylims, col="lightblue")
  gn <- split(mat[i,], sfac)
  for(j in 1:nlevels(sfac))
    points(rep(j, length(gn[[j]])), gn[[j]], pch=4)
}
dev.off()

qqmsg(status=0L)
