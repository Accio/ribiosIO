#!/bin/tcsh /SOFT/bi/apps/R/bdeRscript

## Drug reposition with the Connectivity Map dataset
## Jitao David Zhang <jitao_david.zhang@roche.com>

suppressMessages(library(ribiosUtils))
suppressMessages(library(ribiosArg))

uptags.file <- getArg("uptags", onlyArg=NULL, missingArg=NULL)
downtags.file <- getArg("downtags", onlyArg=NULL, missingArg=NULL)
output.file <- getArg("outfile", onlyArg=NULL, missingArg=NULL)
scriptName <- scriptName()
getHelp <- existArg("h") | existArg("help")
listDataset <- existArg("listDataset")

## currently supported datasets
cmapReg <- list(dataset="cmap",
                chiptype="HG-U133A",
                RdataFile="/DATA/bi/apps/drugReposition/cmap_build02_rank_gti.RData",
                RobjectName="conmap_gti",
                groupName="cmap_name")
tggatesReg <- list(dataset="tggates",
                   chiptype="HG-U133_PLUS_2",
                   Rfile="",
                   RobjectName="",
                   groupName="")

spDats <- list(cmapReg, tggatesReg)

if(listDataset) {
  spDatsNames <- sapply(spDats, function(x) x$dataset)
  cat(spDatsNames, "\n")
  qqmsg(status=0L)
} else if(is.null(uptags.file) || is.null(downtags.file) || is.null(output.file) || getHelp) {
  qqmsg(paste("\nUsage:",
              scriptName,
              "-uptags UPFILE -downtags DOWNFILE -outfile OUTFILE OPTS\n\n",
              
              "-uptags UPFILE\t\tAnnotated up-regulated probesets in your experiment, in tab-delimited file\n",
              "-downtags DOWNFILE\tAnnotated down-regulated probesets in your experiment, in tab-delimited file\n",
              "-annotation ANNO\tChip type of input tags, must be supported by GTI, or 'GeneID'\n",
              "-dataset DATASET\tDataset used for repositioning\n",
              "-outfile OUTFILE\tOutput file, currently a tab-delimited file with ranked drugs\n",
              "-perm N\t\tNumber of permutations. Default: 10000\n",
              "\nOther usages:\n",
              scriptName, "-h\t\tHelp on command-line usage\n",
              scriptName,"-listDataset\tList supported datasets\n",
              collapse=" "),
        status=1L)
}

libordie(Biobase)
libordie(ribiosIO)
libordie(ribiosAnnotation)
libordie(ribiosReposition, minVer="1.0.2")

## permutation
permB.char <- getArg("perm", onlyArg="10000", missingArg="10000")
permB <- parseNumVec(permB.char, expLen=1L, failVal=10000L)

## option: annotation and permB
annotation <- getArg("annotation", onlyArg="HG-U133A", missingArg="HG-U133A")
isGtiChiptype <- function(x) x %in% gtiChiptypes()
if(annotation != "HG-U133A" || annotation != "GeneID") {
  if(!isGtiChiptype(annotation)) {
    qqmsg("Annotation not recognized as one of the chiptypes supported by GTI\n",
          status=1L)
  }
}
## load cmap data (SLOW)
cmap.data.file <- "/DATA/bi/apps/drugReposition/cmap_build02_rank_gti.RData"
if(!loadFile(cmap.data.file)) {
  qqmsg("Connectivity Map data not found at ", cmap.data.file,
        "\nThe program is existing. Please contact the maintainer of the program",
        status=-1)
}

## run the analysis
raw.ups <- readLines(uptags.file)
raw.downs <- readLines(downtags.file)
uniqueNonna <- function(x) unique(x[!is.na(x)])

ups <- uniqueNonna(raw.ups)
downs <- uniqueNonna(raw.downs)
if(length(intersect(ups, downs))!=0) {
  udi <- intersect(ups, downs)
  warning(paste("Following probesets were found in both up/down lists:\n",
                paste(udi, collapse=","), sep=""))
  ups <- setdiff(ups, udi)
  downs <- setdiff(downs, udi)
}

up.ind <- match(ups, featureNames(conmap.gti))
down.ind <- match(downs, featureNames(conmap.gti))
group <- pData(conmap.gti)$cmap_name

## HG-U133A specific
if(!any(!is.na(up.ind)) || !any(!is.na(down.ind))) {
  qqmsg("It seems that up/down tags are not HG-U133A probesets.\n",
        "This prototype program currently only supports this chip type, we are working on supporting other platforms\n",
        "Please try again later. The program is existing",
        status=-2)
}

cmap.res <- cmap(rnks=exprs(conmap.gti),
                 up=up.ind,
                 down=down.ind,
                 group=group,
                 permG=permB)
cmap.pd <- pData(conmap.gti)[cmap.res$index,
                             c("cmap_name", "concentration_M_",
                               "duration_h_", "cell")]
cmap.res <- cbind(cmap.res,
                  cmap.pd)
write.table(x=cmap.res,
            file=output.file,
            sep="\t", row.names=FALSE)
            

qqmsg(status=0)
