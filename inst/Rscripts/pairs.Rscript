#!/bin/tcsh /SOFT/bi/apps/R/bdeRscript

suppressMessages(library(ribiosArg))
suppressMessages(library(ribiosUtils))
scriptInit()

usage <- paste("\nUsage: ",
               scriptName(),
               "-infile FILE [OPTS]\n",
               "Mandatory parameters\n",
               "-infile FILE\tOne tab-delimited file or gct format file\n",
               "\nOptional parameters\n",
               "-outfile\t\tIf present, the PDF/PNG file is saved with this name (automatic format detection)\n",
               "-lm\t\tPerform linear regression and draw the regression line\n",
               "-cor\t\tCalculate correlation\n",
               "-corr\t\tCalculate correlation^2\n",
               "-log10\t\tPerform log10 transformation before plotting\n",
               sep="")

argParse("outfile,1 lm cor corr log10",
         "infile", usage=usage)

##----------------------------------------##
## parsing input parameters
##----------------------------------------##
assertFile(filename <- argGet("infile"))
doCor <- argPresent("cor")
doCorr <- argPresent("corr")
doLm <- argPresent("lm")
doLog10 <- argPresent("log10")

if(doCor && doCorr)
  qqmsg("Error:specify either '-cor' or '-corr'", status=1L)
inbase <- basefilename(filename)
outfile <- getArg("outfile", onlyArg=NULL, missingArg=NULL)
if(is.null(outfile)) outfile <- paste(inbase, ".pdf", sep="")

##----------------------------------------##
## load libraries
##----------------------------------------##
libordie(ribiosIO)
libordie(ribiosPlot)

tbl <- read_exprs_matrix(filename)
if(ncol(tbl)<2)
  qqmsg("Error: input file has less than two columns. Program exiting...\n",
        status=1L)

xlabel <- colnames(tbl)[1]
ylabel <- colnames(tbl)[2]

panel.cor <- function(x, y, digits=2, prefix="", cex.cor, corr, ...) {
  panel.smooth(x, y, cex = 1, col.smooth = "red", span = 2/3, iter = 3, ...) 
  r <- cor(x, y, use="complete.obs")
  if(doCorr)
    r <- r^2
  legend("topleft",cex=1.2, bty="n",
         paste(ifelse(doCorr, "r^2", "r"), "=",
               sprintf("%1.3g", r), sep=""))
}
panel.low <- function(x, y, digits=2, prefix="", cex.cor, corr, ...) {
  r <- cor(x, y, use="complete.obs")
  if(doCorr)
    r <- r^2
  legend("center",cex=0.6, bty="n",
         paste(ifelse(doCorr, "R^2", "r"), "=",
               sprintf("%1.3g", r), sep=""))
}

title <- sprintf("%s %d genes",inbase,nrow(tbl))
##----------------------------------------##
## Plotting
##----------------------------------------##
openFileDevice(outfile)



if(ncol(tbl)==2) {
  x <- tbl[,1]
  y <- tbl[,2]
  
  xd <- ifelse(!doLog10, list(x), list(log10(x)))[[1]]
  yd <- ifelse(!doLog10, list(y), list(log10(y)))[[1]]
  xd[is.infinite(xd)] <- NA
  yd[is.infinite(yd)] <- NA
  if(doLog10) {
    xlabel <- paste(xlabel, "[log10]")
    ylabel <- paste(ylabel, "[log10]")
  }
  plot(xd, yd, main=title, xlab=xlabel, ylab=ylabel)
  corxy <- cor(x,y, use="complete.obs")
  if(doCor) {
    legend("topleft",
           sprintf("r=%1.3g", corxy), bty="n")
  } else if (doCorr) {
    corxy <- corxy*corxy
    legend("topleft",
           sprintf("r^2=%1.3g", corxy), bty="n")
  }
} else if (ncol(tbl)>2) {
  tmat <- data.matrix(tbl)
  if(doLog10)
    tmat <- log10(tmat)
  tmat[is.infinite(tmat)] <- NA
  if(doCor || doCorr) {
    upp <- panel.cor
  } else {
    upp <- panel.smooth
  }
  pairs(tmat,  main=title, upper.panel=upp, lower.panel=panel.low)
}

closeFileDevice()

qqmsg(status=0L)


